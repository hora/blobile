{"version":3,"sources":["webpack:///src/app/settings/settings.page.html","webpack:///src/app/settings/settings.page.ts","webpack:///src/app/settings/settings.module.ts","webpack:///src/app/settings/settings-routing.module.ts"],"names":["updateService","settings","$event","SettingsPage","SettingsPageModule","SettingsPageRoutingModule","Device","routes","path","component","database","deploy","platform","voiceService","loading","betaEnabled","devicePlatform","hasSpeech","teamOptions","header","voiceOptions","id","trackById","this","window","speechSynthesis","ready","info","console","debug","getInfo","error","configuration","getConfiguration","channel","toLowerCase","current","getAll","teams","volume","Math","round","voice","sort","a","b","fullName","voices","setBetaEnabled","team","find","t","key","setBoolean","ev","setString","setNumber","detail","value","setVoice","speak","preventDefault","stopPropagation","say","force","setFavoriteTeam","forChild"],"mappings":"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","file":"x","sourcesContent":["<ion-header [translucent]=\"true\">\n  <ion-toolbar color=\"primary\">\n    <ion-title>Slettings</ion-title>\n    <ion-buttons slot=\"secondary\">\n      <ion-button *ngIf=\"loading\">\n        <ion-spinner></ion-spinner>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-list lines=\"none\" class=\"ion-text-wrap\">\n    <span *ngIf=\"devicePlatform !== 'web'\">\n      <!-- native-only stuff -->\n      <ion-list-header lines=\"full\">\n        <h3>Automatic Updates</h3>\n      </ion-list-header>\n      <ion-item>\n        <ion-label class=\"ion-text-wrap\">Receive content updates early?</ion-label>\n        <ion-toggle *ngIf=\"current\" (ionChange)=\"setBetaEnabled()\" [(ngModel)]=\"current.betaEnabled\" slot=\"end\"></ion-toggle>\n      </ion-item>\n      <ion-item *ngIf=\"updateService.updateAvailable && !updateService.updateReady && updateService.percentDone\">\n        <ion-label slot=\"start\">{{updateService.phase}}:</ion-label>\n        <ion-progress-bar value=\"{{updateService.percentDone}}\"></ion-progress-bar>\n      </ion-item>\n      <ion-item *ngIf=\"updateService.updateReady\" color=\"danger\">\n        <ion-label class=\"ion-text-wrap\">A content update is available.</ion-label>\n        <ion-button slot=\"end\" color=\"light\" (click)=\"updateService.reload()\">Apply</ion-button>\n      </ion-item>\n      <ion-list-header lines=\"full\">\n        <h3>Disable Sleep</h3>\n      </ion-list-header>\n      <ion-item>\n        <ion-label class=\"ion-text-wrap\">Disable sleep while games are active?</ion-label>\n        <ion-toggle *ngIf=\"current\" (ionChange)=\"setBoolean('disableSleep')\" [(ngModel)]=\"current.disableSleep\" slot=\"end\"></ion-toggle>\n      </ion-item>\n    </span>\n    <ion-list-header lines=\"full\">\n      <h3>Interface</h3>\n    </ion-list-header>\n    <ion-item>\n      <ion-label class=\"ion-text-wrap\">Reduce motion in effects?</ion-label>\n      <ion-toggle *ngIf=\"current\" (ionChange)=\"setBoolean('reduceMotion')\" [(ngModel)]=\"current.reduceMotion\" slot=\"end\"></ion-toggle>\n    </ion-item>\n    <ion-item>\n      <ion-label class=\"ion-text-wrap\">Always use dark mode?</ion-label>\n      <ion-toggle *ngIf=\"current\" (ionChange)=\"settings.setDarkMode(current.darkMode)\" [(ngModel)]=\"current.darkMode\" slot=\"end\"></ion-toggle>\n    </ion-item>\n    <ion-list-header lines=\"full\">\n      <h3>Audio</h3>\n    </ion-list-header>\n    <ion-item>\n      <ion-label class=\"ion-text-wrap\">Enable Sound Effects?</ion-label>\n      <ion-toggle *ngIf=\"current\" (ionChange)=\"setBoolean('audio')\" [(ngModel)]=\"current.audio\" slot=\"end\"></ion-toggle>\n    </ion-item>\n    <ion-item>\n      <ion-label class=\"ion-text-wrap\">Volume:</ion-label>\n      <ion-range aria-label=\"Volume\" *ngIf=\"current\" min=\"0\" max=\"1000\" debounce=\"200\" (ionChange)=\"setVolume($event)\" [(ngModel)]=\"volume\" slot=\"end\"></ion-range>\n    </ion-item>\n    <ion-item *ngIf=\"hasSpeech\">\n      <ion-label class=\"ion-text-wrap\">Enable Speech?</ion-label>\n      <ion-toggle *ngIf=\"current\" (ionChange)=\"setBoolean('speech')\" [(ngModel)]=\"current.speech\" slot=\"end\"></ion-toggle>\n    </ion-item>\n    <ion-item *ngIf=\"hasSpeech\">\n      <ion-icon name=\"volume-high-outline\" slot=\"start\" (click)=\"speak($event)\" class=\"ion-no-margin\" style=\"margin-right: 0.5em\"></ion-icon>\n      <ion-label for=\"select-voice\" class=\"ion-text-wrap\">Voice:</ion-label>\n      <ion-select *ngIf=\"current && voice\" id=\"select-voice\" aria-label=\"Select a Voice\" class=\"ion-text-wrap\" (ionChange)=\"setVoice($event)\" interface=\"action-sheet\" [interfaceOptions]=\"voiceOptions\" okText=\"Choose\" cancelText=\"Cancel\" [value]=\"current.voice\">\n        <ion-select-option *ngFor=\"let voice of voices\" [value]=\"voice.voiceURI\">{{voice.name}}</ion-select-option>\n      </ion-select>\n    </ion-item>\n    <ion-list-header lines=\"full\">\n      <h3>Teams</h3>\n    </ion-list-header>\n    <ion-item id=\"bl-team-selector\">\n      <ion-label class=\"ion-text-wrap\">\n        <ion-label for=\"choose-your-team\">\n          <h4>Choose Your Team:</h4>\n        </ion-label>\n        <ion-note>Your team is always first in the live feed.</ion-note>\n      </ion-label>\n      <ion-select *ngIf=\"current && teams\" id=\"choose-your-team\" aria-label=\"Choose Your Team\" class=\"ion-text-wrap\" (ionChange)=\"setString('favoriteTeam', $event)\" interface=\"action-sheet\" [interfaceOptions]=\"teamOptions\" okText=\"Choose\" cancelText=\"Cancel\" [(ngModel)]=\"current.favoriteTeam\">\n        <ion-select-option *ngFor=\"let team of teams; trackBy: id\" [value]=\"team.id\">{{team.fullName}}</ion-select-option>\n      </ion-select>\n    </ion-item>\n  </ion-list>\n</ion-content>\n","import { Component, OnInit } from '@angular/core';\n\nimport { Plugins } from '@capacitor/core';\nconst { Device } = Plugins;\n\nimport { Deploy } from 'cordova-plugin-ionic/dist/ngx';\n\nimport { Team } from '../../lib/model/team';\n\nimport { UpdateService } from '../../lib/update.service';\nimport { APIDatabase } from '../../lib/api/database';\nimport { Settings, SettingsService } from '../../lib/settings.service';\nimport { Platform } from '@ionic/angular';\nimport Util from 'src/lib/util';\nimport { VoiceService } from 'src/lib/voice.service';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.page.html',\n  styleUrls: ['./settings.page.scss'],\n})\nexport class SettingsPage implements OnInit {\n  public loading = true;\n\n  public current: Settings;\n  public betaEnabled = false;\n  public devicePlatform = 'web';\n  public hasSpeech = false;\n\n  public teamOptions: any = {\n    header: 'Choose Your Team',\n  };\n  public voiceOptions: any = {\n    header: 'Choose a Voice',\n  };\n\n  public teams: Team[];\n  public volume: number;\n  public voices: SpeechSynthesisVoice[];\n  public voice: SpeechSynthesisVoice;\n\n  id = Util.trackById;\n\n  constructor(\n    public database: APIDatabase,\n    public deploy: Deploy,\n    private platform: Platform,\n    public settings: SettingsService,\n    public updateService: UpdateService,\n    public voiceService: VoiceService,\n  ) {\n    this.hasSpeech = window.speechSynthesis !== undefined;\n  }\n\n  async ngOnInit() {\n    await this.platform.ready();\n    console.debug('SettingsPage.ngOnInit()');\n\n    try {\n      const info = await Device.getInfo();\n      this.devicePlatform = info.platform;\n      console.debug(`SettingsPage.ngOnInit(): platform=${this.devicePlatform}`);\n    } catch (err) {\n      console.error('SettingsPage.ngOnInit(): failed to get device info:', err);\n    }\n\n    if (this.devicePlatform !== 'web') {\n      try {\n        const configuration = await this.deploy.getConfiguration();\n        this.betaEnabled = configuration.channel.toLowerCase() === 'beta';\n        console.debug(`SettingsPage.ngOnInit(): betaEnabled=${this.betaEnabled}`);\n      } catch (err) {\n        console.error('SettingsPage.ngOnInit(): failed to get deploy configuration:', err);\n      }\n    }\n\n    this.current = await this.settings.getAll();\n    this.volume = Math.round(this.current.volume * 1000);\n\n    this.teams = (await this.database.teams()).sort((a: Team, b: Team) => {\n      return (a.fullName < b.fullName) ? -1 : (a.fullName > b.fullName) ? 1 : 0;\n    });\n\n    this.voices = this.voiceService.voices();\n    this.voice = await this.voiceService.voice(this.current.voice);\n\n    this.loading = false;\n    console.debug('SettingsPage.onInit(): current settings=', this.current);\n  }\n\n  async setBetaEnabled() {\n    return await this.settings.setBetaEnabled(this.current.betaEnabled);\n  }\n\n  getTeamName(id: string) {\n    const team = this.teams.find((t: Team) => t.id === id);\n    return team ? team.fullName : '';\n  }\n\n  async setBoolean(key: string) {\n    return await this.settings.setBoolean(key, this.current[key]);\n  }\n  async setString(key: string, ev?: { detail: { value: any }}) {\n    console.debug('setString: key=', key);\n    console.debug('setString: ev=', ev);\n    if (ev && ev.detail && ev.detail.value) {\n\n    }\n    return await this.settings.setString(key, this.current[key]);\n  }\n  async setVolume(ev?: CustomEvent<any>) {\n    return await this.settings.setNumber('volume', ev.detail.value / 1000.0);\n  }\n\n  async setVoice(ev?: CustomEvent<any>) {\n    const voice = await this.voiceService.voice(ev?.detail?.value);\n    if (voice) {\n      await this.settings.setVoice(ev.detail.value);\n      this.speak();\n    } else {\n      console.error(`Unable to locate voice: ${ev?.detail?.value}`);\n    }\n  }\n\n  async speak(ev?: CustomEvent<any>) {\n    ev?.preventDefault();\n    ev?.stopPropagation();\n    return this.voiceService.say('The commissioner is doing a great job!', {\n      force: true,\n    });\n  }\n\n  async setFavoriteTeam(detail: { value: string }) {\n    const team = this.teams.find((t: Team) => {\n      return t.id === detail.value;\n    });\n    this.settings.setFavoriteTeam(team?.id);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { SettingsPageRoutingModule } from './settings-routing.module';\n\nimport { SettingsPage } from './settings.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SettingsPageRoutingModule\n  ],\n  declarations: [SettingsPage]\n})\nexport class SettingsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SettingsPage } from './settings.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SettingsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingsPageRoutingModule {}\n"]}