{"version":3,"sources":["webpack:///src/app/standings/standings.page.html","webpack:///src/app/standings/standings-routing.module.ts","webpack:///src/app/standings/standings.page.ts","webpack:///src/app/standings/standings.module.ts"],"names":["routes","path","component","StandingsPage","database","modalController","platform","stream","loading","leagues","standings","tiebreakers","data","subleagues","this","ready","subscribe","evt","games","postprocess","id","console","debug","modal","create","componentProps","present","l","name","sortByWins","a","b","ret","wins","order","indexOf","find","tiebreaker","teams","sl","filter","s","map","subLeagueData","teamsData","d","divisions","item","sort","div","divisionData","team","teamData","fullName","emoji","emojiColor","mainColor","secondaryColor","mainTextColor","contrastingMainColor","secondaryTextColor","contrastingSecondaryColor","losses","playoffs","push","_","index","StandingsPageRoutingModule","forChild","StandingsPageModule"],"mappings":"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","file":"x","sourcesContent":["<ion-header [translucent]=\"true\">\n  <ion-toolbar color=\"primary\">\n    <ion-title>\n      Standings\n    </ion-title>\n    <ion-buttons slot=\"secondary\">\n      <ion-button *ngIf=\"loading\">\n        <ion-spinner></ion-spinner>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"ion-no-margin\">\n  <ion-grid>\n    <ion-row>\n      <ion-col *ngFor=\"let subleague of data.subleagues; trackBy: id\">\n        <ion-header class=\"ion-no-border ion-text-center\">\n          <h4>{{subleague.name}}</h4>\n        </ion-header>\n        <ion-card class=\"ion-no-padding ion-no-margin ion-margin-vertical\" *ngFor=\"let division of subleague.divisions; trackBy: id\">\n          <ion-card-header>\n            <ion-card-subtitle>{{division.name}}</ion-card-subtitle>\n          </ion-card-header>\n          <ion-card-content class=\"ion-no-padding\">\n            <ion-item\n              lines=\"none\"\n              class=\"team-row\"\n              [style]=\"'--background: ' + team.mainColor + '; --color: ' + team.mainTextColor\"\n              *ngFor=\"let team of division.teams; trackBy: id\"\n              (click)=\"openTeam(team.id)\"\n            >\n              <ion-label class=\"team-name\">{{team.name}}</ion-label>\n              <ion-note class=\"team-wins\" slot=\"end\" [style]=\"'--color: ' + team.mainTextColor\">\n                {{team.wins}}-{{team.losses}}\n              <!--\n                <div class=\"playoffs\" *ngIf=\"team.playoffs\">üèÜ</div>\n                <div class=\"playoffs\" *ngIf=\"!team.playoffs\">&nbsp;</div>\n              -->\n            </ion-note>\n            </ion-item>\n          </ion-card-content>\n        </ion-card>\n      </ion-col>\n    </ion-row>\n  </ion-grid>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { StandingsPage } from './standings.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: StandingsPage,\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class StandingsPageRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { ModalController, Platform } from '@ionic/angular';\n\nimport { APIStream } from 'src/lib/api/stream';\nimport { StreamData } from 'src/lib/model/streamData';\nimport { Standings } from 'src/lib/model/standings';\nimport { Team } from 'src/lib/model/team';\nimport { Leagues } from 'src/lib/model/leagues';\nimport { Subleague } from 'src/lib/model/subleague';\nimport { Division } from 'src/lib/model/division';\nimport { APIDatabase } from 'src/lib/api/database';\nimport { Tiebreaker } from 'src/lib/model/tiebreaker';\nimport { TeamPage } from '../team-page/team-page.page';\n\ninterface LeagueData {\n  id: string;\n  name: string;\n  subleagues: SubleagueData[];\n}\n\ninterface SubleagueData {\n  id: string;\n  name: string;\n  divisions: DivisionData[];\n}\n\ninterface DivisionData {\n  id: string;\n  name: string;\n  teams: TeamData[];\n}\n\ninterface TeamData {\n  id: string;\n  name: string;\n  wins: number;\n  losses: number;\n  playoffs: boolean;\n}\n\n@Component({\n  selector: 'app-standings',\n  templateUrl: 'standings.page.html',\n  styleUrls: ['standings.page.scss']\n})\nexport class StandingsPage implements OnInit {\n  loading = true;\n  leagues = new Leagues({});\n  standings = new Standings({});\n  tiebreakers = new Tiebreaker({});\n\n  data = { subleagues: [] } as LeagueData;\n\n  constructor(\n    private database: APIDatabase,\n    private modalController: ModalController,\n    private platform: Platform,\n    private stream: APIStream,\n  ) {\n  }\n\n  async ngOnInit(): Promise<void> {\n    await this.platform.ready();\n    this.stream.subscribe(async (evt: StreamData|Event) => {\n      if (evt instanceof StreamData) {\n        this.leagues = evt.leagues;\n        this.standings = evt.games.standings;\n      }\n      this.postprocess();\n    });\n  }\n\n  async openTeam(id: string) {\n    console.debug(`opening team: ${id}`);\n    const modal = await this.modalController.create({\n      component: TeamPage,\n      componentProps: {\n        id,\n      },\n    });\n    return await modal.present();\n  }\n\n  async postprocess() {\n    const l = this.leagues?.leagues[0];\n    if (!l) {\n      return;\n    }\n\n    this.data.name = l.name;\n\n    const sortByWins = (a: Team, b: Team) => {\n      const aWins = this.standings.wins[a.id];\n      const bWins = this.standings.wins[b.id];\n\n      let ret = bWins - aWins;\n      if (ret === 0) {\n        const aTiebreaker = this.tiebreakers.order.indexOf(a.id);\n        const bTiebreaker = this.tiebreakers.order.indexOf(b.id);\n\n        ret = aTiebreaker - bTiebreaker;\n      }\n\n      return ret;\n    };\n\n    this.tiebreakers = this.leagues.tiebreakers.find((tiebreaker: Tiebreaker) => tiebreaker.id === l.tiebreakers);\n    const teams = await this.database.teams();\n\n    const sl = this.leagues?.subleagues?.filter((s: Subleague) => {\n      return l.subleagues.indexOf(s.id) >= 0;\n    });\n\n    this.data.subleagues = sl.map((s: Subleague) => {\n      const subLeagueData = {\n        id: s.id,\n        name: s.name,\n      } as SubleagueData;\n\n      const teamsData = [] as TeamData[];\n\n      const d = this.leagues?.divisions?.filter((item: Division) => {\n        return s.divisions.indexOf(item.id) >= 0;\n      });\n\n      subLeagueData.divisions = d.sort((a: Division, b: Division) => {\n        return a.name < b.name ? -1 : a.name > b.name ? 1 : 0;\n      }).map((div: Division) => {\n        const divisionData = {\n          id: div.id,\n          name: div.name,\n        } as DivisionData;\n\n        divisionData.teams = div.teams\n          .map((id: string) => teams.find((team: Team) => id === team.id))\n          .sort(sortByWins)\n          .map((team: Team) => {\n          const teamData = {\n            id: team.id,\n            name: team.fullName,\n            emoji: team.emoji,\n            emojiColor: team.emojiColor,\n            mainColor: team.mainColor,\n            secondaryColor: team.secondaryColor,\n            mainTextColor: team.contrastingMainColor,\n            secondaryTextColor: team.contrastingSecondaryColor,\n            wins: this.standings.wins[team.id],\n            losses: this.standings.losses[team.id],\n            playoffs: false,\n          };\n\n          teamsData.push(teamData);\n\n          return teamData;\n        });\n\n        return divisionData;\n      });\n\n      teamsData.sort((a: TeamData, b: TeamData) => {\n        let ret = b.wins - a.wins;\n        if (ret === 0) {\n          ret = this.tiebreakers.order.indexOf(a.id) - this.tiebreakers.order.indexOf(b.id);\n        }\n\n        return ret;\n      }).filter((_, index) => {\n        return index < 4;\n      }).map((team: TeamData) => {\n        team.playoffs = true;\n      });\n\n      return subLeagueData;\n    });\n\n    this.loading = false;\n    // console.debug('leagues:', this.leagues);\n    // console.debug('standings:', this.standings);\n    // console.debug('teams:', teams);\n    // console.debug('data:', this.data);\n  }\n\n  id(item: any) {\n    if (item && item.id) {\n      return item.id;\n    }\n    return item;\n  }\n}\n","import { IonicModule } from '@ionic/angular';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { StandingsPage } from './standings.page';\n\nimport { StandingsPageRoutingModule } from './standings-routing.module';\n\n@NgModule({\n  imports: [\n    IonicModule,\n    CommonModule,\n    FormsModule,\n    StandingsPageRoutingModule\n  ],\n  declarations: [StandingsPage]\n})\nexport class StandingsPageModule {}\n"]}